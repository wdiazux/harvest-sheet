name: Web Interface Trigger

on:
  repository_dispatch:
    types: [harvest-web-trigger]
  workflow_dispatch:
    inputs:
      user_email:
        description: 'Authenticated user email'
        required: true
        type: string
      user_token_hash:
        description: 'Hashed OAuth token for verification'
        required: false
        type: string
      csrf_token:
        description: 'CSRF protection token'
        required: false
        type: string
      from_date:
        description: 'Start date (YYYY-MM-DD)'
        required: true
        type: string
      to_date:
        description: 'End date (YYYY-MM-DD)'
        required: true
        type: string
      user_prefix:
        description: 'User prefix or "all"'
        required: false
        default: 'all'
        type: string
      upload_to_sheets:
        description: 'Upload to Google Sheets'
        required: false
        default: true
        type: boolean
      include_advanced_fields:
        description: 'Include advanced fields'
        required: false
        default: false
        type: boolean
      enable_raw_json:
        description: 'Export raw JSON'
        required: false
        default: false
        type: boolean
      debug_mode:
        description: 'Enable debug mode'
        required: false
        default: false
        type: boolean

jobs:
  validate-and-run:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Extract and validate parameters
        id: params
        run: |
          # Support both workflow_dispatch and repository_dispatch
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            USER_EMAIL="${{ github.event.client_payload.user_email }}"
            FROM_DATE="${{ github.event.client_payload.from_date }}"
            TO_DATE="${{ github.event.client_payload.to_date }}"
            USER_PREFIX="${{ github.event.client_payload.user_prefix }}"
            UPLOAD_SHEETS="${{ github.event.client_payload.upload_to_sheets }}"
            ADVANCED_FIELDS="${{ github.event.client_payload.include_advanced_fields }}"
            RAW_JSON="${{ github.event.client_payload.enable_raw_json }}"
            DEBUG_MODE="${{ github.event.client_payload.debug_mode }}"

            # Parse combined auth_data field (format: token_hash:csrf_token:timestamp)
            AUTH_DATA="${{ github.event.client_payload.auth_data }}"
            TOKEN_HASH=$(echo "$AUTH_DATA" | cut -d':' -f1)
            CSRF_TOKEN=$(echo "$AUTH_DATA" | cut -d':' -f2)
          else
            USER_EMAIL="${{ github.event.inputs.user_email }}"
            TOKEN_HASH="${{ github.event.inputs.user_token_hash }}"
            CSRF_TOKEN="${{ github.event.inputs.csrf_token }}"
            FROM_DATE="${{ github.event.inputs.from_date }}"
            TO_DATE="${{ github.event.inputs.to_date }}"
            USER_PREFIX="${{ github.event.inputs.user_prefix }}"
            UPLOAD_SHEETS="${{ github.event.inputs.upload_to_sheets }}"
            ADVANCED_FIELDS="${{ github.event.inputs.include_advanced_fields }}"
            RAW_JSON="${{ github.event.inputs.enable_raw_json }}"
            DEBUG_MODE="${{ github.event.inputs.debug_mode }}"
          fi

          if [[ ! "$FROM_DATE" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
            echo "‚ùå Invalid from_date format. Use YYYY-MM-DD"
            exit 1
          fi

          if [[ ! "$TO_DATE" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
            echo "‚ùå Invalid to_date format. Use YYYY-MM-DD"
            exit 1
          fi

          if [[ ! "$USER_EMAIL" =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
            echo "‚ùå Invalid email format"
            exit 1
          fi

          USER_PREFIX=$(echo "$USER_PREFIX" | sed 's/[^a-zA-Z0-9_]//g')

          echo "user_email=$USER_EMAIL" >> $GITHUB_OUTPUT
          echo "user_token_hash=$TOKEN_HASH" >> $GITHUB_OUTPUT
          echo "csrf_token=$CSRF_TOKEN" >> $GITHUB_OUTPUT
          echo "from_date=$FROM_DATE" >> $GITHUB_OUTPUT
          echo "to_date=$TO_DATE" >> $GITHUB_OUTPUT
          echo "user_prefix=$USER_PREFIX" >> $GITHUB_OUTPUT
          echo "upload_to_sheets=$UPLOAD_SHEETS" >> $GITHUB_OUTPUT
          echo "include_advanced_fields=$ADVANCED_FIELDS" >> $GITHUB_OUTPUT
          echo "enable_raw_json=$RAW_JSON" >> $GITHUB_OUTPUT
          echo "debug_mode=$DEBUG_MODE" >> $GITHUB_OUTPUT

          echo "‚úÖ Parameters validated and sanitized"

      - name: Validate user authorization
        id: auth
        run: |
          ALLOWED_USERS="${{ secrets.ALLOWED_USERS }}"
          USER_EMAIL="${{ steps.params.outputs.user_email }}"
          TOKEN_HASH="${{ steps.params.outputs.user_token_hash }}"
          CSRF_TOKEN="${{ steps.params.outputs.csrf_token }}"

          echo "üîê Checking authorization for: $USER_EMAIL"

          if [ -z "$ALLOWED_USERS" ]; then
            echo "‚ùå ALLOWED_USERS secret not configured"
            exit 1
          fi

          # Check if user email is in comma-separated list
          if echo ",$ALLOWED_USERS," | grep -q ",$USER_EMAIL,"; then
            echo "‚úÖ User $USER_EMAIL is authorized"
            echo "authorized=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå User $USER_EMAIL is not authorized"
            echo "‚ùå Please check ALLOWED_USERS secret contains your email"
            exit 1
          fi

          if [ ! -z "$TOKEN_HASH" ]; then
            echo "üîí Token hash received for additional verification: ${TOKEN_HASH:0:8}..."
          fi

          if [ ! -z "$CSRF_TOKEN" ]; then
            echo "üîí CSRF token received: ${CSRF_TOKEN:0:8}..."
          fi

          echo "‚è∞ Request time: $(date)"
          echo "üë§ Triggered by: ${{ github.actor }}"

      - name: Security audit log
        run: |
          echo "üîç SECURITY AUDIT LOG"
          echo "===================="
          echo "Timestamp: $(date -u)"
          echo "User Email: ${{ steps.params.outputs.user_email }}"
          echo "GitHub Actor: ${{ github.actor }}"
          echo "Repository: ${{ github.repository }}"
          echo "Ref: ${{ github.ref }}"
          echo "Event: ${{ github.event_name }}"
          echo "Run ID: ${{ github.run_id }}"
          echo "Run Number: ${{ github.run_number }}"
          echo "Workflow: ${{ github.workflow }}"

          echo "Parameters:"
          echo "  - Date Range: ${{ steps.params.outputs.from_date }} to ${{ steps.params.outputs.to_date }}"
          echo "  - User Prefix: ${{ steps.params.outputs.user_prefix }}"
          echo "  - Upload Sheets: ${{ steps.params.outputs.upload_to_sheets }}"
          echo "  - Advanced Fields: ${{ steps.params.outputs.include_advanced_fields }}"
          echo "  - Debug Mode: ${{ steps.params.outputs.debug_mode }}"

          if [ ! -z "${{ steps.params.outputs.token_hash }}" ]; then
            echo "  - Token Hash: ${{ steps.params.outputs.token_hash }}"
          fi

          echo "===================="

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Set environment variables securely
        env:
          USER_LIST: ${{ vars.AVAILABLE_USERS }}
        run: |
          upload_sheets="${{ steps.params.outputs.upload_to_sheets }}"
          enable_json="${{ steps.params.outputs.enable_raw_json }}"
          advanced_fields="${{ steps.params.outputs.include_advanced_fields }}"

          echo "UPLOAD_TO_GOOGLE_SHEET=${upload_sheets}" >> $GITHUB_ENV
          echo "ENABLE_RAW_JSON=${enable_json}" >> $GITHUB_ENV
          echo "INCLUDE_ADVANCED_FIELDS=${advanced_fields}" >> $GITHUB_ENV
          echo "FROM_DATE=${{ steps.params.outputs.from_date }}" >> $GITHUB_ENV
          echo "TO_DATE=${{ steps.params.outputs.to_date }}" >> $GITHUB_ENV

          if [ ! -z "${{ secrets.GOOGLE_SA_PROJECT_ID }}" ]; then
            {
              echo "GOOGLE_SA_PROJECT_ID=${{ secrets.GOOGLE_SA_PROJECT_ID }}"
              echo "GOOGLE_SA_PRIVATE_KEY_ID=${{ secrets.GOOGLE_SA_PRIVATE_KEY_ID }}"
              echo "GOOGLE_SA_PRIVATE_KEY=${{ secrets.GOOGLE_SA_PRIVATE_KEY }}"
              echo "GOOGLE_SA_CLIENT_EMAIL=${{ secrets.GOOGLE_SA_CLIENT_EMAIL }}"
              echo "GOOGLE_SA_CLIENT_ID=${{ secrets.GOOGLE_SA_CLIENT_ID }}"
            } >> $GITHUB_ENV
            echo "‚úÖ Google Service Account credentials loaded"
          else
            echo "‚ö†Ô∏è Google Service Account credentials not found - uploads will be skipped"
          fi

          # Extract user prefixes from AVAILABLE_USERS variable
          echo "üîê Dynamically loading user credentials from AVAILABLE_USERS"

          if [ ! -z "$USER_LIST" ]; then
            # Parse JSON and extract user values (prefixes)
            USER_PREFIXES=$(echo "$USER_LIST" | grep -oP '"value":\s*"\K[^"]+' | grep -v "^all$")

            echo "Found users: $USER_PREFIXES"

            # Load credentials for each user
            for prefix in $USER_PREFIXES; do
              echo "Loading credentials for: $prefix"
              # We cannot dynamically access secrets, so we need a workaround
              # The Python script will detect these from environment automatically
            done
          fi

          echo "‚ö†Ô∏è  Note: Due to GitHub Actions limitations, all user secrets must be manually loaded"
          echo "‚ö†Ô∏è  Please ensure all user secrets are configured with the correct prefixes"

      - name: Create output directory
        run: |
          mkdir -p output

      - name: Run Harvest script
        id: harvest
        run: |
          # Build command arguments
          ARGS="--from-date ${{ steps.params.outputs.from_date }} --to-date ${{ steps.params.outputs.to_date }}"

          if [ "${{ steps.params.outputs.user_prefix }}" != "all" ]; then
            ARGS="$ARGS --user ${{ steps.params.outputs.user_prefix }}"
          fi

          if [ "${{ steps.params.outputs.debug_mode }}" = "true" ]; then
            ARGS="$ARGS --debug"
          fi

          echo "Running: python convert_harvest_json_to_csv.py $ARGS"

          # Run the script and capture output
          python convert_harvest_json_to_csv.py $ARGS 2>&1 | tee harvest_output.log

          echo "script_completed=true" >> $GITHUB_OUTPUT

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: harvest-export-${{ github.run_number }}
          path: |
            output/*.csv
            output/*.json
            harvest_output.log
          retention-days: 30

      - name: Create job summary
        if: always()
        run: |
          echo "# Harvest Export Job Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ steps.params.outputs.user_email }}" >> $GITHUB_STEP_SUMMARY
          echo "**Date Range:** ${{ steps.params.outputs.from_date }} to ${{ steps.params.outputs.to_date }}" >> $GITHUB_STEP_SUMMARY
          echo "**User:** ${{ steps.params.outputs.user_prefix }}" >> $GITHUB_STEP_SUMMARY
          echo "**Upload to Sheets:** ${{ steps.params.outputs.upload_to_sheets }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.harvest.outputs.script_completed }}" = "true" ]; then
            echo "‚úÖ **Status:** Completed successfully" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üìÅ **Generated files:**" >> $GITHUB_STEP_SUMMARY
            if ls output/*.csv 1> /dev/null 2>&1; then
              echo "- CSV files: $(ls output/*.csv | wc -l)" >> $GITHUB_STEP_SUMMARY
            fi
            if ls output/*.json 1> /dev/null 2>&1; then
              echo "- JSON files: $(ls output/*.json | wc -l)" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚ùå **Status:** Failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìã **Script Output:**" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          tail -20 harvest_output.log >> $GITHUB_STEP_SUMMARY || echo "No output log available" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY