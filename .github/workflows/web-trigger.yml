name: Web Interface Trigger

on:
  repository_dispatch:
    types: [harvest-web-trigger]
  workflow_dispatch:
    inputs:
      user_email:
        description: 'Authenticated user email'
        required: true
        type: string
      user_token_hash:
        description: 'Hashed OAuth token for verification'
        required: false
        type: string
      csrf_token:
        description: 'CSRF protection token'
        required: false
        type: string
      from_date:
        description: 'Start date (YYYY-MM-DD)'
        required: true
        type: string
      to_date:
        description: 'End date (YYYY-MM-DD)'
        required: true
        type: string
      user_prefix:
        description: 'User prefix or "all"'
        required: false
        default: 'all'
        type: string
      upload_to_sheets:
        description: 'Upload to Google Sheets'
        required: false
        default: true
        type: boolean
      include_advanced_fields:
        description: 'Include advanced fields'
        required: false
        default: false
        type: boolean

jobs:
  validate-and-run:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Extract and validate parameters
        id: params
        run: |
          # Support both workflow_dispatch and repository_dispatch
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            USER_EMAIL="${{ github.event.client_payload.user_email }}"
            FROM_DATE="${{ github.event.client_payload.from_date }}"
            TO_DATE="${{ github.event.client_payload.to_date }}"
            USER_PREFIX="${{ github.event.client_payload.user_prefix }}"
            UPLOAD_SHEETS="${{ github.event.client_payload.upload_to_sheets }}"
            ADVANCED_FIELDS="${{ github.event.client_payload.include_advanced_fields }}"

            # Parse combined auth_data field (format: token_hash:csrf_token:timestamp)
            AUTH_DATA="${{ github.event.client_payload.auth_data }}"
            TOKEN_HASH=$(echo "$AUTH_DATA" | cut -d':' -f1)
            CSRF_TOKEN=$(echo "$AUTH_DATA" | cut -d':' -f2)
          else
            USER_EMAIL="${{ github.event.inputs.user_email }}"
            TOKEN_HASH="${{ github.event.inputs.user_token_hash }}"
            CSRF_TOKEN="${{ github.event.inputs.csrf_token }}"
            FROM_DATE="${{ github.event.inputs.from_date }}"
            TO_DATE="${{ github.event.inputs.to_date }}"
            USER_PREFIX="${{ github.event.inputs.user_prefix }}"
            UPLOAD_SHEETS="${{ github.event.inputs.upload_to_sheets }}"
            ADVANCED_FIELDS="${{ github.event.inputs.include_advanced_fields }}"
          fi

          # Validate inputs (suppress specific error details)
          if [[ ! "$FROM_DATE" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]] || \
             [[ ! "$TO_DATE" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]] || \
             [[ ! "$USER_EMAIL" =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
            echo "❌ Validation failed"
            exit 1
          fi

          USER_PREFIX=$(echo "$USER_PREFIX" | sed 's/[^a-zA-Z0-9_]//g')

          # Mask sensitive values in logs
          echo "::add-mask::$USER_EMAIL"
          echo "::add-mask::$TOKEN_HASH"
          echo "::add-mask::$CSRF_TOKEN"

          echo "user_email=$USER_EMAIL" >> $GITHUB_OUTPUT
          echo "user_token_hash=$TOKEN_HASH" >> $GITHUB_OUTPUT
          echo "csrf_token=$CSRF_TOKEN" >> $GITHUB_OUTPUT
          echo "from_date=$FROM_DATE" >> $GITHUB_OUTPUT
          echo "to_date=$TO_DATE" >> $GITHUB_OUTPUT
          echo "user_prefix=$USER_PREFIX" >> $GITHUB_OUTPUT
          echo "upload_to_sheets=$UPLOAD_SHEETS" >> $GITHUB_OUTPUT
          echo "include_advanced_fields=$ADVANCED_FIELDS" >> $GITHUB_OUTPUT

      - name: Validate user authorization
        id: auth
        run: |
          ALLOWED_USERS="${{ secrets.ALLOWED_USERS }}"
          USER_EMAIL="${{ steps.params.outputs.user_email }}"
          TOKEN_HASH="${{ steps.params.outputs.user_token_hash }}"
          CSRF_TOKEN="${{ steps.params.outputs.csrf_token }}"

          # Suppress output for security
          if [ -z "$ALLOWED_USERS" ]; then
            echo "❌ Authorization configuration error"
            exit 1
          fi

          # Check if user email is in comma-separated list
          if echo ",$ALLOWED_USERS," | grep -q ",$USER_EMAIL,"; then
            echo "✅ Authorization successful"
            echo "authorized=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Authorization failed"
            exit 1
          fi

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Set environment variables securely
        env:
          USER_CREDS: ${{ secrets.USER_CREDENTIALS }}
        run: |
          upload_sheets="${{ steps.params.outputs.upload_to_sheets }}"
          advanced_fields="${{ steps.params.outputs.include_advanced_fields }}"

          echo "UPLOAD_TO_GOOGLE_SHEET=${upload_sheets}" >> $GITHUB_ENV
          echo "INCLUDE_ADVANCED_FIELDS=${advanced_fields}" >> $GITHUB_ENV
          echo "FROM_DATE=${{ steps.params.outputs.from_date }}" >> $GITHUB_ENV
          echo "TO_DATE=${{ steps.params.outputs.to_date }}" >> $GITHUB_ENV

          # Load Google Service Account credentials
          if [ ! -z "${{ secrets.GOOGLE_SA_PROJECT_ID }}" ]; then
            {
              echo "GOOGLE_SA_PROJECT_ID=${{ secrets.GOOGLE_SA_PROJECT_ID }}"
              echo "GOOGLE_SA_PRIVATE_KEY_ID=${{ secrets.GOOGLE_SA_PRIVATE_KEY_ID }}"
              echo "GOOGLE_SA_PRIVATE_KEY=${{ secrets.GOOGLE_SA_PRIVATE_KEY }}"
              echo "GOOGLE_SA_CLIENT_EMAIL=${{ secrets.GOOGLE_SA_CLIENT_EMAIL }}"
              echo "GOOGLE_SA_CLIENT_ID=${{ secrets.GOOGLE_SA_CLIENT_ID }}"
            } >> $GITHUB_ENV
          fi

          # Load user credentials dynamically from JSON secret (suppress output)
          if [ -z "$USER_CREDS" ]; then
            echo "❌ Configuration error"
            exit 1
          fi

          # Parse JSON and create environment variables for each user
          echo "$USER_CREDS" | jq -r '.users[] |
            "\(.prefix)_HARVEST_ACCOUNT_ID=\(.harvest_account_id)\n" +
            "\(.prefix)_HARVEST_AUTH_TOKEN=\(.harvest_auth_token)\n" +
            "\(.prefix)_HARVEST_USER_AGENT=\(.harvest_user_agent)\n" +
            "\(.prefix)_HARVEST_USER_ID=\(.harvest_user_id)\n" +
            "\(.prefix)_GOOGLE_SHEET_ID=\(.google_sheet_id)\n" +
            "\(.prefix)_GOOGLE_SHEET_TAB_NAME=\(.google_sheet_tab_name)"
          ' >> $GITHUB_ENV

          echo "✅ Environment configured"

      - name: Create output directory
        run: |
          mkdir -p output

      - name: Run Harvest script
        id: harvest
        run: |
          # Build command arguments
          ARGS="--from-date ${{ steps.params.outputs.from_date }} --to-date ${{ steps.params.outputs.to_date }}"

          if [ "${{ steps.params.outputs.user_prefix }}" != "all" ]; then
            ARGS="$ARGS --user ${{ steps.params.outputs.user_prefix }}"
          fi

          # Run the script and capture output (suppress console output)
          python convert_harvest_json_to_csv.py $ARGS > harvest_output.log 2>&1

          echo "script_completed=true" >> $GITHUB_OUTPUT

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: harvest-export-${{ github.run_number }}
          path: |
            output/*.csv
            output/*.json
            harvest_output.log
          retention-days: 30

      - name: Create job summary
        if: always()
        run: |
          echo "# Harvest Export Job Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.harvest.outputs.script_completed }}" = "true" ]; then
            echo "✅ **Status:** Completed successfully" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "📁 **Generated files:**" >> $GITHUB_STEP_SUMMARY
            if ls output/*.csv 1> /dev/null 2>&1; then
              echo "- CSV files: $(ls output/*.csv | wc -l)" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ **Status:** Failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔒 **Security Note:** Workflow logs will be automatically deleted within 6 hours." >> $GITHUB_STEP_SUMMARY
          echo "📦 **Artifacts:** Download CSV files from the artifacts section (available for 30 days)." >> $GITHUB_STEP_SUMMARY